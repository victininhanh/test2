var util = require('util');
var ISO8583 = function(packager) {
	packager && (this.packager = packager);
	
	this.fields = {};
	
	this._unpack = function(msg, id) { // unpack cac phan nho
		var result;
		try {
			var packager = this.packager[id]; // dua vao id 0 1 2 3 => Kieu pack
			result = require('./packer/' + packager.type).unpack(msg, packager); //=> Goi unpack tuong ung
			this.fields[id] = result.data; // Lay tra ve
		} catch(e) {
			var errMsg = 'Error unpacking data from bit ' + id + '\nPackager: ' + util.inspect(packager);
			console.error(errMsg);
			throw new Error(errMsg + ': ' + e.message);
		}
		return result;
	};
	
	this._pack = function(row, id) {
		var result;
		try {
			var packager = this.packager[id]; // Dua vao id, lay pack tuong ung roi goi pack binh thuong
			result = require('./packer/' + packager.type).pack(row, packager);
		} catch(e) {
			var errMsg = 'Error packing data from bit ' + id + '\nPackager: ' + util.inspect(packager);
			console.error(errMsg);
			throw new Error(errMsg + ': ' + e.message);
		}
		return result;
	};
	
	this.unpack = function(msg) {
		var result;
		var fields = {};
		
		result = this._unpack(msg, 0); // Unpack F0 truoc - lay MTI
      console.log('F0'+ util.inspect(result));
		fields['0'] = result.data; // moi lan unpack xong lay data lam tra ve, phan con lai goi la rest Data (coi nhu xoa du lieu da lay va chi quan tam du lieu con lai) 
      
      console.log('Going to F1');
		result = this._unpack(result.restData, 1); // unpack du lieu tiep tu du lieu rest, luc nay bat dau voi 1
      console.log('F1'+ util.inspect(result));
		fields['1'] = result.data; // Co duoc bitmap
      
      console.log('Going to Other F');
		var fieldIds = result.fieldIds; // co duoc cac fF sau khi parse bit map
		  //console.log('FIDS'+ util.inspect(result));
		for(var i in fieldIds) { // ung voi moi field co duoc, goi unpack tuong ung
			result = this._unpack(result.restData, fieldIds[i]);
        console.log('F['+ i +']'+ util.inspect(result));
			fields[i] = result.data;
		}
		return this.fields;
	};
	
	this._sort = function(o) { // Sap xep nhung gi co thuoc tinh key
		var sorted = {},
		key, a = [];

		for (key in o) {
			if (o.hasOwnProperty(key)) {
          console.log(o,' has key ', key);
					a.push(key);
			}
		}
   console.log('a going to sort ', require('util').inspect(a) ); 
		a.sort(); // sap xep nhung gi co key
  console.log('a sorted ', require('util').inspect(a) ); 
		for (key = 0; key < a.length; key++) {
			sorted[a[key]] = o[a[key]];
		}
    console.log('return sorted ', require('util').inspect(sorted) ); 
		return sorted;
	};
	
	this.pack = function(data) { // dong goi
		var retMsg = '', retMap = {};
		var result;
		data = this._sort(data); // sap xep data
		for(var i in data) {
			if (i == 1) { // Neu id  la 1 (bit map) 
        console.log('Pack ID = 1');
				result = this._pack(data, i);
        console.log('Result Pack ID = 1 = ', result);
			} else {
        console.log('Pack ID data[i], i', data[i], i);
				result = this._pack(data[i], i);
        console.log('Result Pack diff ID   = ', result);
			}
			
			retMap[i] = result.msg;
			retMsg += result.msg;
			//console.log(retMap);
      console.log("retMap = ", retMap);
		}
			
		return retMsg;
	};
};

exports.ISO8583 = ISO8583;
exports.defaultPackager = require('./packager').packager;
